type Query {
  "Lista de las temporadas de Formula 1. De 1950 a 2019 lo seleccionamos"
  seasonsList: [Season!]!
  """
  Obtenemos la informacion de las carreras seleccionadas por anio
  Tener en cuenta que solo existen desde 1950 a 2019 lo seleccionamos
  """
  racesByYear(year: String!): [Race!]!
  "Carrera seleccionada por anio y numero de carrera"
  raceSelect(year: String!, round: Int!): Race
  """
  Lista de los pilotos de la F1 de toda la historia
  Tenemos dos opciones:
  Por un lado podemos obtener todos los pilotos
  Por otro lado hacemos uso de la paginacion y podemos limitar el numero de resultados
  """
  historyDrivers(pageElements: Int, page: Int): [Driver!]!
  """
  Obtenemos la informacion de las pilotos seleccionadas por anio
  Tener en cuenta que solo existen desde 1950 a 2019 lo seleccionamos
  """
  driversYear(year: String!): [Driver!]!
  """
  Obtenemos la informacion de las pilotos seleccionadas por anio y numero de carrera
  Tener en cuenta que solo existen desde 1950 a 2019 lo seleccionamos
  """
  driversYearAndRound(year: String!, round: Int!): [Driver!]!
  "Obtenemos la informacion del piloto mediaten el valor ID"
  driverSelect(id: String!): Driver
  "Clasificacion final de los pilotos de una temporada"
  seasonPilotRanking(year: String!): [DriverStanding!]!
}

type Mutation {
  add(value: String!): [String]
}

"Informacion de la temporada"
type Season {
  "AÃ±o de la temporada"
  year: String!
  "Informacion de wikipedia"
  url: String!
  "Informacion de wikipedia adaptada a los dispositivos moviles"
  urlMobile: String!
}

type Race {
  season: String!
  round: String!
  url: String!
  urlMobile: String!
  name: String!
  circuit: Circuit!
  date: String!
  time: String
}

type Circuit {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  location: Location!
}

type Location {
  lat: String!
  lng: String!
  locality: String!
  country: String!
}

type Driver {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  dateOfBirth: String!
  nationality: String!
  code: String
  permanentNumber: String
}

type DriverStanding {
  position: String!
  positionText: String!
  points: String!
  wins: String!
  driver: Driver!
  constructors: [Constructor!]!
}

type Constructor {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  nationality: String!
}
